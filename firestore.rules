
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSuperAdmin() {
      return request.auth != null && (request.auth.token.role == 'Super Admin' || request.auth.token.email == 'core@suupe.com');
    }

    function isAdmin() {
      return request.auth != null && (isSuperAdmin() || request.auth.token.role == 'Admin');
    }
    
    function isPartnerAdmin() {
      return request.auth != null && request.auth.token.role == 'partner_admin';
    }
    
    function isEmployee() {
      return request.auth != null && request.auth.token.role == 'employee';
    }
    
    function isPartner() {
        return request.auth != null && (isPartnerAdmin() || isEmployee());
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }
    
    function isPartnerAdminForResource() {
      // For new documents, check incoming data. For existing, check stored data.
      let partnerId = request.resource.data.partnerId;
      if (resource != null) {
        partnerId = resource.data.partnerId;
      }
      return isPartnerAdmin() && request.auth.token.partnerId == partnerId;
    }

    // ============================================================================
    // CORE COLLECTIONS
    // ============================================================================
    
    match /partners/{partnerId} {
      allow read: if isAdmin() || (isPartner() && request.auth.token.partnerId == partnerId);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isPartnerAdmin() && request.auth.token.partnerId == partnerId);
      allow delete: if isSuperAdmin();
    }
    
    match /adminUsers/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userMappings/{identifier} {
      allow read: if request.auth == null || isAdmin();
      allow write: if false; 
    }

    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && (isAdmin() || request.auth.token.partnerId == resource.data.partnerId);
      allow list: if isAuthenticated() && (isAdmin() || (isPartner() && request.query.partnerId == request.auth.token.partnerId));
      allow write: if isAuthenticated() && (isAdmin() || isPartnerAdminForResource());
    }
    
    match /userWorkspaceContext/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    match /userWorkspaceLinks/{linkId} {
        allow read: if isOwner(resource.data.userId) || isAdmin() || isPartnerAdminForResource();
        allow write: if (isPartnerAdminForResource() && request.auth.uid == resource.data.invitedBy) || 
                        (isOwner(resource.data.userId) && resource.data.status == 'invited' && request.resource.data.status == 'active');
    }

    match /invitationCodes/{invitationId} {
      allow list: if isAuthenticated() && (request.auth.token.phoneNumber == request.query.phoneNumber || request.auth.token.partnerId == request.query.partnerId);
      allow read: if isAuthenticated() && (request.auth.token.phoneNumber == resource.data.phoneNumber || request.auth.token.partnerId == resource.data.partnerId || isAdmin());
      // Allow partner admins to create invites for their own partnerId
      allow create: if isPartnerAdmin() && request.auth.token.partnerId == request.resource.data.partnerId;
      allow update: if (isPartnerAdmin() && request.auth.token.partnerId == resource.data.partnerId) ||
                       (isAuthenticated() && resource.data.phoneNumber == request.auth.token.phoneNumber);
      allow delete: if isPartnerAdmin() && request.auth.token.partnerId == resource.data.partnerId;
    }
    
    // ============================================================================
    // OTHER COLLECTIONS
    // ============================================================================

    match /workflowTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
