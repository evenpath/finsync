
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSuperAdmin() {
      return request.auth != null && (request.auth.token.role == 'Super Admin' || request.auth.token.email == 'core@suupe.com');
    }

    function isAdmin() {
      return request.auth != null && (isSuperAdmin() || request.auth.token.role == 'Admin');
    }
    
    function isPartnerAdmin() {
      return request.auth != null && request.auth.token.role == 'partner_admin';
    }
    
    function isEmployee() {
      return request.auth != null && request.auth.token.role == 'employee';
    }
    
    function isPartner() {
        return request.auth != null && (isPartnerAdmin() || isEmployee());
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    // ============================================================================
    // CORE COLLECTIONS
    // ============================================================================
    
    match /partners/{partnerId} {
      allow read: if isAdmin() || request.auth.token.partnerId == partnerId;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isPartnerAdmin() && request.auth.token.partnerId == partnerId);
      allow delete: if isSuperAdmin();
    }
    
    match /adminUsers/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userMappings/{identifier} {
      allow read: if request.auth == null; 
      allow read: if isAdmin();
      allow write: if false; 
    }

    match /teamMembers/{memberId} {
      function isPartnerAdminForResource() {
        let partnerId = request.resource.data.partnerId;
        if (resource != null) {
          partnerId = resource.data.partnerId;
        }
        return isPartnerAdmin() && request.auth.token.partnerId == partnerId;
      }
      
      allow read: if isAuthenticated() && (isAdmin() || request.auth.token.partnerId == resource.data.partnerId);
      allow list: if isAuthenticated() && (isAdmin() || (isPartner() && request.query.partnerId == request.auth.token.partnerId));
      allow write: if isAuthenticated() && (isAdmin() || isPartnerAdminForResource());
    }

    match /invitationCodes/{invitationId} {
        // Partner admins can manage invitations for their own workspace
        allow read, write: if isPartnerAdmin() && request.auth.token.partnerId == resource.data.partnerId;
        allow list: if isPartnerAdmin() && request.query.partnerId == request.auth.token.partnerId;

        // Unauthenticated or employee users can query for a specific code to validate it
        allow list: if (request.auth == null || isEmployee()) && request.query.keys().hasOnly(['invitationCode', 'status', 'limit']);

        // Authenticated users can read/accept an invitation if it matches their phone number
        allow read, update: if isAuthenticated() && request.auth.token.phone_number == resource.data.phoneNumber;
        
        // System Admins have full access
        allow read, write, list: if isAdmin();
    }

    // ============================================================================
    // OTHER COLLECTIONS
    // ============================================================================

    match /workflowTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
