
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSuperAdmin() {
      return request.auth != null && (request.auth.token.role == 'Super Admin' || request.auth.token.email == 'core@suupe.com');
    }

    function isAdmin() {
      return request.auth != null && (isSuperAdmin() || request.auth.token.role == 'Admin');
    }
    
    function isPartnerAdmin() {
      return request.auth != null && request.auth.token.role == 'partner_admin';
    }
    
    function isEmployee() {
      return request.auth != null && request.auth.token.role == 'employee';
    }
    
    function isPartner() {
        return request.auth != null && (isPartnerAdmin() || isEmployee());
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if a user is a partner admin for a specific resource
    // This handles both create (request.resource) and update (resource) operations.
    function isPartnerAdminForResource() {
      // For new documents, check incoming data. For existing, check stored data.
      let partnerId = request.resource.data.partnerId;
      if (resource != null) {
        partnerId = resource.data.partnerId;
      }
      return isPartnerAdmin() && request.auth.token.partnerId == partnerId;
    }


    // ============================================================================
    // CORE COLLECTIONS
    // ============================================================================
    
    match /partners/{partnerId} {
      allow read: if isAdmin() || (isPartner() && request.auth.token.partnerId == partnerId);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isPartnerAdmin() && request.auth.token.partnerId == partnerId);
      allow delete: if isSuperAdmin();
    }
    
    match /adminUsers/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userMappings/{identifier} {
      // Allow unauthenticated reads for login lookup
      allow read: if request.auth == null;
      // Allow admins to read for debugging
      allow read: if isAdmin();
      // No client-side writes
      allow write: if false; 
    }

    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && (isAdmin() || request.auth.token.partnerId == resource.data.partnerId);
      allow list: if isAuthenticated() && (isAdmin() || (isPartner() && request.query.partnerId == request.auth.token.partnerId));
      allow write: if isAuthenticated() && (isAdmin() || isPartnerAdminForResource());
    }

    // ============================================================================
    // OTHER COLLECTIONS (EXAMPLE)
    // ============================================================================

    match /workflowTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
