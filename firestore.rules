
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================

    function isSuperAdmin() {
      return request.auth != null && (request.auth.token.role == 'Super Admin' || request.auth.token.email == 'core@suupe.com');
    }

    function isAdmin() {
      return request.auth != null && (isSuperAdmin() || request.auth.token.role == 'Admin');
    }
    
    function isPartnerAdmin() {
      return request.auth != null && request.auth.token.role == 'partner_admin';
    }
    
    function isEmployee() {
      return request.auth != null && request.auth.token.role == 'employee';
    }
    
    function isPartner() {
        return request.auth != null && (isPartnerAdmin() || isEmployee());
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
    }

    function canAccessPartner(partnerId) {
      return isAdmin() || (isAuthenticated() && request.auth.token.partnerIds != null && partnerId in request.auth.token.partnerIds);
    }
    
    function canModifyPartner(partnerId) {
      return isAdmin() || (isPartnerAdmin() && request.auth.token.partnerId == partnerId);
    }

    // ============================================================================
    // CORE COLLECTIONS
    // ============================================================================
    
    match /partners/{partnerId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.token.partnerIds != null && partnerId in request.auth.token.partnerIds);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() || (isPartnerAdmin() && request.auth.token.partnerId == partnerId);
      allow delete: if isSuperAdmin();
    }
    
    match /adminUsers/{adminId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /userMappings/{identifier} {
      allow read: if request.auth == null || isAdmin();
      allow write: if false; 
    }

    match /teamMembers/{memberId} {
      allow read: if isAuthenticated() && (isAdmin() || canAccessPartner(resource.data.partnerId));
      allow list: if isAuthenticated() && 
                    (isAdmin() || 
                      (isPartner() && 
                        request.query.partnerId == request.auth.token.partnerId)
                    );
      allow write: if isAuthenticated() && 
                     (isAdmin() || canModifyPartner(request.resource.data.partnerId));
    }

    match /invitationCodes/{invitationId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.token.phoneNumber == resource.data.phoneNumber);
      
      // Allow list for backend validation checks (querying by code)
      allow list: if isAuthenticated();

      // Partner Admins can manage codes for their own workspace
      allow write: if isPartnerAdmin() && request.auth.token.partnerId == request.resource.data.partnerId;
    }

    match /userWorkspaceLinks/{linkId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();

      // Allow write if you are an admin or if you are the user accepting an invitation.
      allow write: if isAdmin() || 
                      (isOwner(resource.data.userId) && 
                       request.resource.data.status == 'active' &&
                       resource.data.status == 'invited');
    }
    
    match /userWorkspaceContext/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // ============================================================================
    // OTHER COLLECTIONS (EXAMPLE)
    // ============================================================================

    match /workflowTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Fallback rule to deny access to any other collections
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
