
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user authentication and roles
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'Super Admin';
    }

    function isPartnerAdmin(partnerId) {
      return isSignedIn() && request.auth.token.role == 'partner_admin' && request.auth.token.partnerId == partnerId;
    }
    
    function isEmployee(partnerId) {
       return isSignedIn() && request.auth.token.role == 'employee' && request.auth.token.partnerId == partnerId;
    }
    
    function belongsToPartner(partnerId) {
        return isPartnerAdmin(partnerId) || isEmployee(partnerId);
    }
    
    // =================================================================
    // Public Collections
    // =================================================================

    // Partners can be read by anyone to get basic info, but only created/managed by backend/admins.
    match /partners/{partnerId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // User mappings are critical for login. They should be readable by anyone attempting to log in,
    // but only writable by a secure backend function to maintain integrity.
    match /userMappings/{email} {
        allow read: if true;
        allow create, update, delete: if isSuperAdmin(); // Should only be done by server functions
    }
    
    // =================================================================
    // Authenticated User Collections
    // =================================================================

    // Users can only read/write their own data.
    match /users/{userId} {
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
    
    // User's context for their active workspace can only be managed by them.
    match /userWorkspaceContexts/{userId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // =================================================================
    // Partner-Scoped Collections
    // =================================================================
    
    // Team members can be read by anyone in the same partner organization.
    // Only partner admins can create, update, or delete team members.
    match /teamMembers/{userId} {
      allow read: if belongsToPartner(resource.data.partnerId);
      allow create, update, delete: if isPartnerAdmin(resource.data.partnerId);
    }
    
    // Tasks can be read by anyone in the same partner organization.
    // Tasks can only be created or deleted by a partner admin.
    // An employee can update a task only if it is assigned to them.
    match /tasks/{taskId} {
      allow read: if belongsToPartner(resource.data.partnerId);
      allow create, delete: if isPartnerAdmin(resource.data.partnerId);
      allow update: if isPartnerAdmin(resource.data.partnerId) || 
                      (isEmployee(resource.data.partnerId) && resource.data.assignee == request.auth.uid);
    }
    
    // Workspace links are the source of truth for access.
    // They can be read by the user they belong to.
    // They can only be created/modified by a partner admin (e.g., during invitation).
    match /userWorkspaceLinks/{linkId} {
        allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create, update, delete: if isPartnerAdmin(request.resource.data.partnerId);
    }
    
    // Invitation codes can be read by anyone, but only created/managed by partner admins.
    match /invitationCodes/{codeId} {
        allow read: if true;
        allow create, update, delete: if isPartnerAdmin(request.resource.data.partnerId);
    }

    // Audit logs are write-only for authenticated users and unreadable by clients.
    // This prevents users from seeing potentially sensitive log data.
    match /auditLogs/{logId} {
        allow read: if false;
        allow write: if isSignedIn();
    }
  }
}
